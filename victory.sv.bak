module victory (Clock, Reset, vict, out);
input Clock, Reset, vict;
output [6:0] out;
reg [6:0] out;
reg [2:0] PS;
reg [2:0] NS;

parameter [2:0] O=3'b000, ONE=3'b001, TWO=3'b010, THREE=3'b011, FOUR=3'b100, FIVE=3'b101, SIX=3'b110, SEVEN=3'b111;

always @(*)
case (PS)
O: if (vict) NS = ONE;
else NS = O;
ONE: if (vict) NS = TWO;
else NS = ONE;
TWO: if (vict) NS = THREE;
else NS = TWO;
THREE: if (vict) NS = FOUR;
else NS = THREE;
FOUR: if (vict) NS = FIVE;
else NS = FOUR;
FIVE: if (vict) NS = SIX;
else NS = FIVE;
SIX: if (vict) NS = SEVEN;
else NS = SIX;
SEVEN: if (vict) NS = 3'bxxx;
else NS = SEVEN;
default: NS = 3'bxxx;
endcase

always @ (*)
case (PS)
O: out = ~7'b0111111;
ONE: out = ~7'b0000110;
TWO: out = ~7'b1011011;
THREE: out = ~7'b1001111;
FOUR: out = ~7'b1100110;
FIVE: out = ~7'b1101101;
SIX: out = ~7'b1111101;
SEVEN: out = ~7'b0000111;
default: out = 7'bxxxxxxx;
endcase

 // DFF
 always @(posedge Clock) 
	if (Reset) 
		PS <= 0; 
	else 
		PS <= NS;
endmodule

module victory_testbench(); 
input Clock, Reset, vict;
output reg [6:0] out;

 victory dutVictory (.Clock, .Reset, .vict, .out);
  
 parameter CLOCK_PERIOD=100; 
 initial Clock=1; 
 always begin 
 #(CLOCK_PERIOD/2); 
 Clock = ~Clock; 
 end 
 
 initial begin 
 @(posedge Clock); 
 Reset <= 1; @(posedge Clock); 
 Reset <= 0; vict <= 0;@(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 vict <= 1;@(posedge Clock);
 @(posedge Clock); 
 @(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 vict <= 0;@(posedge Clock);
 @(posedge Clock); 
 @(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 vict <= 1;@(posedge Clock);
 @(posedge Clock); 
 @(posedge Clock);
 @(posedge Clock);
 @(posedge Clock);
 $stop; // End the simulation. 
 end 
endmodule 

